name: checkm

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #arch and centos both unavailable https://github.com/actions/virtual-environments#available-environments
        python-version: [3.6, 3.9]

    steps:
    - name: initialize github actions test environment
      uses: actions/checkout@v2

    - name: setup python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    - name: update the pip package manager and the setuptools and wheel libraries
      run: |
        python -m pip install -U pip setuptools wheel
        # GitHub does not always have up-to-date pip, and
        # installation from pre-built binary archives (with pip)
        # will complain if pip is out of date.
        # Up-to-date setuptools and wheel libraries
        # enable installation from source archives.

    - name: report environment variables for debugging
      run: |
        printf '%s\n' \
          "Workflow ${GITHUB_WORKFLOW}" \
          "Action Number ${GITHUB_ACTION}" \
          "Run ID ${GITHUB_RUN_ID}" \
          "Run Number ${GITHUB_RUN_NUMBER}" \
          "Workspace ${GITHUB_WORKSPACE}"

    - name: report python version
      run: |
        python -c 'import sys; print(sys.version)'

    - name: setup workspace
      run: |
        mkdir -v "${GITHUB_WORKSPACE}"/{bin,Downloads}
        echo "${GITHUB_WORKSPACE}"/bin >> "${GITHUB_PATH}"

    - name: install pplacer
      run: |
        wget https://github.com/matsen/pplacer/releases/download/v1.1.alpha19/pplacer-linux-v1.1.alpha19.zip \
         -O ${GITHUB_WORKSPACE}/Downloads/pplacer-linux-v1.1.alpha19.zip
        unzip ${GITHUB_WORKSPACE}/Downloads/pplacer-linux-v1.1.alpha19.zip
        mv -v ${GITHUB_WORKSPACE}/pplacer-Linux-v1.1.alpha19/pplacer \
         ${GITHUB_WORKSPACE}/bin
      # homepage: https://github.com/matsen/pplacer
      # NOTE: compiling from src requires old OCaml version so avoid for now
      #       https://github.com/matsen/pplacer/issues/354
      #       sudo apt install libgsl-dev libgslcblas0 libsqlite3-dev -y

    # - name: test pplacer
    #   run: |
    #     pplacer
    #     # `pplacer -h` prints help menu but gives exit code 2
    #     pplacer -help
    #     pplacer --help
    #     pplacer --version

    - name: install hmmer3
      run: |
        wget http://eddylab.org/software/hmmer/hmmer-3.3.2.tar.gz \
         -O ${GITHUB_WORKSPACE}/Downloads/hmmer-3.3.2.tar.gz
        tar zxvf ${GITHUB_WORKSPACE}/Downloads/hmmer-3.3.2.tar.gz
        cd ${GITHUB_WORKSPACE}/hmmer-3.3.2
        ./configure --prefix ${GITHUB_WORKSPACE}
        make
        make install
        make check

    # - name: test hmmer3
    #   run: |
    #     # not all binaries are used for checkm; only check those called in
    #     #  https://github.com/Ecogenomics/CheckM/blob/master/checkm/hmmer.py
    #     # skip no argument tests because return value is 1 
    #     # ` --help` nonexistent
    #     for _bin in hmmalign hmmfetch hmmpress hmmscan hmmsearch; do $_bin -h; man -P cat $_bin; done

    - name: checkout prodigal
      uses: actions/checkout@v2
      with:
        repository: hyattpd/Prodigal
        path: github_src_prodigal
        ref: v2.6.3

    - name: install prodigal
      run: |
        cd ${GITHUB_WORKSPACE}/github_src_prodigal
        make
        chmod +x prodigal
        mv -v prodigal \
         ${GITHUB_WORKSPACE}/bin

    # - name: test prodigal
    #   run: |
    #     prodigal
    #     prodigal -h
    #     # `prodigal --help` nonexistent option
    #     cd ${GITHUB_WORKSPACE}/github_src_prodigal
    #     prodigal -i anthus_aco.fas -a proteins.faa -d genes.ffn

    - name: install python test libraries
      run: |
        pip3 install nose pysam pytest

    - name: install python library dependencies and checkm
      run: |
        pip3 install checkm-genome dendropy matplotlib numpy pysam scipy

    - name: test dendropy
      run: |
        python -c 'import dendropy'
        #TO-DO pytest run the DendroPy/tests; dir missing from pip install

    - name: test matplotlib
      run: |
        python -c 'import matplotlib'
        _ver=$(python -c 'import matplotlib; print(matplotlib.__version__)')
        wget -O ${GITHUB_WORKSPACE}/Downloads/matplotlib-v${_ver}.tar.gz \
         https://github.com/matplotlib/matplotlib/archive/v${_ver}.tar.gz
        tar zxvf ${GITHUB_WORKSPACE}/Downloads/matplotlib-v${_ver}.tar.gz \
         --directory ${GITHUB_WORKSPACE}/Downloads
        cd ${GITHUB_WORKSPACE}/Downloads/matplotlib-${_ver}
        python -m pytest --maxfail=50

    - name: test numpy
      run: |
        pip3 install hypothesis #dependency for testing
        python -c 'import numpy; numpy.test()'

    - name: test pysam
      run: |
        python -c 'import pysam' #TO-DO pytest run pysam/tests; how?

    - name: test scipy
      run: |
        python -c 'import scipy; scipy.test()'

    - name: checkout checkm
      uses: actions/checkout@v2
      with:
        repository: Ecogenomics/CheckM
        path: github_src_checkm
        ref: v1.1.3

    - name: download checkm data
      run: |
        mkdir -p github_src_checkm/database
        wget -O github_src_checkm/database/checkm_data_2015_01_16.tar.gz \
        https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz
        tar zxvf github_src_checkm/database/checkm_data_2015_01_16.tar.gz \
        --directory github_src_checkm/database

    - name: test checkm
      run: |
        checkm data setRoot github_src_checkm/database
        checkm
        checkm -h
        # checkm --help
        cd ${GITHUB_WORKSPACE}/github_src_checkm
        pytest
        checkm test checkm_test_results
